---
- name: "Create system group {{ _common_system_group }}"
  ansible.builtin.group:
    name: "{{ _common_system_group }}"
    system: true
    state: present
  when: _common_system_group != "root"

- name: "Create system user {{ _common_system_user }}"
  ansible.builtin.user:
    name: "{{ _common_system_user }}"
    system: true
    shell: "/usr/sbin/nologin"
    group: "{{ _common_system_group }}"
    createhome: false
  when: _common_system_user != "root"

- name: "Create localhost binary cache path"
  ansible.builtin.file:
    path: "{{ _common_local_cache_path }}"
    state: directory
    mode: 0755
  delegate_to: localhost

- name: "Download and install from binary {{ _common_binary_basename }}"
  when: "not (_common_skip_download)"
  block:
    - name: "Get checksum list for {{ _common_binary_basename }}"
      ansible.builtin.set_fact:
        __common_binary_checksums: "{{ dict(lookup('url', _common_checksums_url, headers=_common_github_api_headers, wantlist=True)
                                    | map('regex_replace', '^([a-fA-F0-9]+)\\s+', 'sha256:\\1 ')
                                    | map('regex_findall', '^(sha256:[a-fA-F0-9]+)\\s+(.+)$') | map('flatten') | map('reverse')) }}"
      run_once: true
      when: (_common_checksums_url)

    - name: "Download {{ _common_binary_basename }}"
      become: false
      ansible.builtin.get_url:
        url: "{{ _common_binary_url }}"
        dest: "{{ _common_local_cache_path }}/{{ _common_binary_name | default(_common_binary_basename) }}"
        headers: "{{ _common_github_api_headers }}"
        checksum: "{{ __common_binary_checksums[_common_binary_basename] | default(omit) }}"
        mode: 0644
      register: __common_download
      until: __common_download is succeeded
      retries: 5
      delay: 2
      # run_once: true  # <-- this can't be set due to multi-arch support
      delegate_to: localhost
      check_mode: false

    - name: "Debug download"
      ansible.builtin.debug:
        var: __common_download

    - name: "Unpack binary archive {{ _common_binary_basename }}"
      become: false
      ansible.builtin.unarchive:
        src: "{{ _common_local_cache_path }}/{{ _common_binary_basename }}"
        dest: "{{ _common_local_cache_path }}"
        mode: 0755
        list_files: true
        extra_opts: "{{ _common_binary_unarchive_opts | default(omit, true) }}"
      register: __common_unpack
      delegate_to: localhost
      check_mode: false
      when: _common_binary_basename is search('\.zip$|\.tar\.gz$')

- name: "List binaries dir"
  ansible.builin.file:
    paths: "{{ _common_local_cache_path }}"
  register: __cached_files

- name: "Debug cached files"
  ansible.builtin.debug:
    var: __cached_files

- name: "Propagate binaries"
  ansible.builtin.copy:
    # src: "{{ (_common_binary_local_dir) | ternary((_common_binary_local_dir ~ '/' ~ item),
    #       (__common_archive_content | select('search', item + '$') | first)) }}"
    src: "{{ _common_local_cache_path }}/{{ item }}"
    dest: "{{ _common_binary_install_dir }}/{{ item }}"
    mode: 0755
    owner: root
    group: root
  loop: "{{ _common_binaries }}"
  notify:
    - restart_service
# vars:
#  __common_archive_content: "{{ [_common_local_cache_path ~ '/' ] | product(__common_unpack.files | default([])) | map('join') | list }}"
